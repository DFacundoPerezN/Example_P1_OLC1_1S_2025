/* The following code was generated by JFlex 1.7.0 */

/* 1. Package e importaciones */
package Analizadores;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/Analizadores/Scanner.jflex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 10, 39, 40, 40, 10,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    10, 35,  0,  0,  0,  0, 33,  0,  0,  0,  0,  0, 37,  0,  0,  0, 
     9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 38,  0,  0, 36,  0,  0, 
     0, 15, 11, 14, 13, 11, 11, 11, 11, 11, 11, 11, 11, 11, 16, 11, 
    11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 29,  0, 30,  0, 12, 
     0,  6, 28, 25, 24,  4,  5, 20, 18, 17, 11, 11,  7, 26, 19, 23, 
    22, 11,  2,  8,  1,  3, 11, 27, 11, 21, 11, 31, 34, 32,  0,  0, 
     0,  0,  0,  0,  0, 40,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\6\2\1\3\1\4\1\5\10\2\1\6"+
    "\1\7\1\10\1\11\2\1\1\12\1\1\1\13\1\14"+
    "\1\15\13\2\1\16\11\2\1\17\1\20\1\21\3\2"+
    "\1\22\7\2\1\17\11\2\1\23\1\24\3\2\1\25"+
    "\1\2\1\26\10\2\1\27\1\2\1\30\12\2\1\31"+
    "\1\2\1\32\1\33\7\2\1\34\2\2\1\35\1\36"+
    "\1\2\1\37\4\2\1\40\3\2\1\41\2\2\1\42"+
    "\1\2\1\43\1\44\1\2\1\45";

  private static int [] zzUnpackAction() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\315\0\366\0\u011f"+
    "\0\u0148\0\u0171\0\244\0\u019a\0\u01c3\0\u01ec\0\u0215\0\u023e"+
    "\0\u0267\0\u0290\0\u02b9\0\51\0\51\0\51\0\51\0\u02e2"+
    "\0\u030b\0\51\0\u0334\0\51\0\51\0\51\0\u035d\0\u0386"+
    "\0\u03af\0\u03d8\0\u0401\0\u042a\0\u0453\0\u047c\0\u04a5\0\u04ce"+
    "\0\u04f7\0\244\0\u0520\0\u0549\0\u0572\0\u059b\0\u05c4\0\u05ed"+
    "\0\u0616\0\u063f\0\u0668\0\51\0\51\0\51\0\u0691\0\u06ba"+
    "\0\u06e3\0\244\0\u070c\0\u0735\0\u075e\0\u0787\0\u07b0\0\u07d9"+
    "\0\u0802\0\244\0\u082b\0\u0854\0\u087d\0\u08a6\0\u08cf\0\u08f8"+
    "\0\u0921\0\u094a\0\u0973\0\244\0\244\0\u099c\0\u09c5\0\u09ee"+
    "\0\244\0\u0a17\0\244\0\u0a40\0\u0a69\0\u0a92\0\u0abb\0\u0ae4"+
    "\0\u0b0d\0\u0b36\0\u0b5f\0\244\0\u0b88\0\244\0\u0bb1\0\u0bda"+
    "\0\u0c03\0\u0c2c\0\u0c55\0\u0c7e\0\u0ca7\0\u0cd0\0\u0cf9\0\u0d22"+
    "\0\244\0\u0d4b\0\244\0\244\0\u0d74\0\u0d9d\0\u0dc6\0\u0def"+
    "\0\u0e18\0\u0e41\0\u0e6a\0\244\0\u0e93\0\u0ebc\0\244\0\244"+
    "\0\u0ee5\0\244\0\u0f0e\0\u0f37\0\u0f60\0\u0f89\0\244\0\u0fb2"+
    "\0\u0fdb\0\u1004\0\244\0\u102d\0\u1056\0\244\0\u107f\0\244"+
    "\0\244\0\u10a8\0\244";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\2\5\1\10"+
    "\1\11\1\12\1\5\1\2\2\13\1\14\1\5\1\15"+
    "\4\5\1\16\1\5\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\53\0\1\5\1\37\7\5\1\0"+
    "\7\5\1\40\12\5\15\0\2\5\1\41\1\42\5\5"+
    "\1\0\14\5\1\43\5\5\15\0\11\5\1\0\22\5"+
    "\15\0\6\5\1\44\2\5\1\0\22\5\15\0\5\5"+
    "\1\45\3\5\1\0\22\5\15\0\1\46\2\5\1\47"+
    "\5\5\1\0\16\5\1\50\3\5\25\0\1\11\51\0"+
    "\1\12\37\0\11\5\1\0\5\5\1\51\14\5\15\0"+
    "\4\5\1\52\4\5\1\0\10\5\1\53\11\5\15\0"+
    "\2\5\1\54\3\5\1\55\2\5\1\0\22\5\15\0"+
    "\3\5\1\56\5\5\1\0\22\5\15\0\11\5\1\0"+
    "\14\5\1\57\5\5\15\0\2\5\1\60\2\5\1\61"+
    "\3\5\1\0\22\5\15\0\11\5\1\0\6\5\1\62"+
    "\13\5\15\0\3\5\1\63\5\5\1\0\22\5\55\0"+
    "\1\64\51\0\1\65\52\0\1\66\5\0\2\5\1\67"+
    "\6\5\1\0\22\5\15\0\3\5\1\70\5\5\1\0"+
    "\22\5\15\0\6\5\1\71\2\5\1\0\10\5\1\72"+
    "\11\5\15\0\11\5\1\0\20\5\1\73\1\5\15\0"+
    "\2\5\1\74\6\5\1\0\22\5\15\0\7\5\1\75"+
    "\1\5\1\0\22\5\15\0\6\5\1\76\2\5\1\0"+
    "\22\5\15\0\1\5\1\77\7\5\1\0\22\5\15\0"+
    "\3\5\1\100\5\5\1\0\22\5\15\0\11\5\1\0"+
    "\14\5\1\101\5\5\15\0\11\5\1\0\2\5\1\102"+
    "\17\5\15\0\11\5\1\0\6\5\1\103\13\5\15\0"+
    "\11\5\1\0\10\5\1\104\11\5\15\0\5\5\1\105"+
    "\3\5\1\0\22\5\15\0\4\5\1\106\4\5\1\0"+
    "\22\5\15\0\11\5\1\0\14\5\1\107\5\5\15\0"+
    "\1\110\10\5\1\0\22\5\15\0\1\111\10\5\1\0"+
    "\22\5\15\0\1\112\10\5\1\0\22\5\15\0\1\113"+
    "\10\5\1\0\22\5\15\0\3\5\1\114\5\5\1\0"+
    "\22\5\15\0\11\5\1\0\10\5\1\115\11\5\15\0"+
    "\3\5\1\116\5\5\1\0\22\5\15\0\5\5\1\117"+
    "\3\5\1\0\22\5\15\0\11\5\1\0\10\5\1\120"+
    "\11\5\15\0\3\5\1\121\5\5\1\0\22\5\15\0"+
    "\7\5\1\67\1\5\1\0\22\5\15\0\5\5\1\122"+
    "\3\5\1\0\22\5\15\0\11\5\1\0\15\5\1\123"+
    "\4\5\15\0\1\5\1\124\7\5\1\0\22\5\15\0"+
    "\1\125\10\5\1\0\22\5\15\0\11\5\1\0\6\5"+
    "\1\126\13\5\15\0\11\5\1\0\12\5\1\127\7\5"+
    "\15\0\3\5\1\130\5\5\1\0\22\5\15\0\11\5"+
    "\1\0\13\5\1\131\6\5\15\0\2\5\1\132\6\5"+
    "\1\0\22\5\15\0\11\5\1\0\16\5\1\133\3\5"+
    "\15\0\11\5\1\0\7\5\1\134\12\5\15\0\1\5"+
    "\1\135\7\5\1\0\22\5\15\0\7\5\1\136\1\5"+
    "\1\0\22\5\15\0\1\5\1\137\7\5\1\0\22\5"+
    "\15\0\11\5\1\0\15\5\1\140\4\5\15\0\1\141"+
    "\10\5\1\0\22\5\15\0\11\5\1\0\6\5\1\142"+
    "\13\5\15\0\11\5\1\0\6\5\1\143\13\5\15\0"+
    "\7\5\1\144\1\5\1\0\22\5\15\0\3\5\1\145"+
    "\5\5\1\0\22\5\15\0\11\5\1\0\16\5\1\146"+
    "\3\5\15\0\3\5\1\147\5\5\1\0\22\5\15\0"+
    "\5\5\1\150\3\5\1\0\22\5\15\0\11\5\1\0"+
    "\7\5\1\151\12\5\15\0\5\5\1\152\3\5\1\0"+
    "\22\5\15\0\11\5\1\0\15\5\1\153\4\5\15\0"+
    "\7\5\1\154\1\5\1\0\22\5\15\0\3\5\1\155"+
    "\5\5\1\0\22\5\15\0\11\5\1\0\10\5\1\156"+
    "\11\5\15\0\5\5\1\157\3\5\1\0\22\5\15\0"+
    "\11\5\1\0\7\5\1\160\12\5\15\0\1\5\1\161"+
    "\7\5\1\0\22\5\15\0\1\162\10\5\1\0\22\5"+
    "\15\0\1\5\1\163\7\5\1\0\22\5\15\0\6\5"+
    "\1\164\2\5\1\0\22\5\15\0\11\5\1\0\12\5"+
    "\1\165\7\5\15\0\11\5\1\0\11\5\1\166\10\5"+
    "\15\0\11\5\1\0\11\5\1\167\10\5\15\0\6\5"+
    "\1\170\2\5\1\0\22\5\15\0\11\5\1\0\17\5"+
    "\1\171\2\5\15\0\7\5\1\172\1\5\1\0\22\5"+
    "\15\0\11\5\1\0\6\5\1\173\13\5\15\0\5\5"+
    "\1\174\3\5\1\0\22\5\15\0\5\5\1\175\3\5"+
    "\1\0\22\5\15\0\11\5\1\0\6\5\1\176\3\5"+
    "\1\177\7\5\15\0\3\5\1\200\5\5\1\0\22\5"+
    "\15\0\11\5\1\0\14\5\1\201\5\5\15\0\1\202"+
    "\10\5\1\0\22\5\15\0\6\5\1\203\2\5\1\0"+
    "\22\5\15\0\3\5\1\204\5\5\1\0\22\5\15\0"+
    "\11\5\1\0\10\5\1\205\11\5\15\0\11\5\1\0"+
    "\10\5\1\206\11\5\15\0\11\5\1\0\6\5\1\207"+
    "\13\5\15\0\7\5\1\210\1\5\1\0\22\5\15\0"+
    "\1\211\10\5\1\0\22\5\15\0\11\5\1\0\14\5"+
    "\1\212\5\5\15\0\11\5\1\0\10\5\1\213\11\5"+
    "\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4305];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\21\1\4\11\2\1\1\11\1\1\3\11"+
    "\25\1\3\11\125\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //Codigo de usuario en sintaxis java
    //Agregar clases, variables, arreglos, objetos etc...
    public class Lexema{        
            public String lexema;
            public String token;


            public Lexema(String lexema, String token){
            this.lexema = lexema;
            this.token = token;
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
      yyline = 1; 
    yychar = 1; 
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { //Aqui se debe guardar los valores (yytext(), yyline, yychar ) para posteriormente generar el reporte de errores Léxicos.
    System.out.println("Este es un error lexico: "+yytext()+ ", en la linea: "+yyline+", en la columna: "+yychar);
            } 
            // fall through
          case 38: break;
          case 2: 
            { //lexemas.add( new Lexema(yytext(),"Boolean",yyline,yychar));
    return new Symbol(sym.ID,yyline,yychar, yytext());
            } 
            // fall through
          case 39: break;
          case 3: 
            { //lexemas.add( new Lexema(yytext(),"Boolean",yyline,yychar));
    return new Symbol(sym.ENTERO,yyline,yychar, yytext());
            } 
            // fall through
          case 40: break;
          case 4: 
            { 
            } 
            // fall through
          case 41: break;
          case 5: 
            { //lexemas.add( new Lexema(yytext(),"Boolean",yyline,yychar));
    return new Symbol(sym.ACCION,yyline,yychar, yytext());
            } 
            // fall through
          case 42: break;
          case 6: 
            { return new Symbol(sym.COR_IZQ,yyline,yychar,yytext());
            } 
            // fall through
          case 43: break;
          case 7: 
            { return new Symbol(sym.COR_DER,yyline,yychar,yytext());
            } 
            // fall through
          case 44: break;
          case 8: 
            { return new Symbol(sym.LLAV_IZQ,yyline,yychar,yytext());
            } 
            // fall through
          case 45: break;
          case 9: 
            { return new Symbol(sym.LLAV_DER,yyline,yychar,yytext());
            } 
            // fall through
          case 46: break;
          case 10: 
            { return new Symbol(sym.NOT,yyline,yychar,yytext());
            } 
            // fall through
          case 47: break;
          case 11: 
            { return new Symbol(sym.COMA,yyline,yychar,yytext());
            } 
            // fall through
          case 48: break;
          case 12: 
            { return new Symbol(sym.DOS_PUNTOS,yyline,yychar,yytext());
            } 
            // fall through
          case 49: break;
          case 13: 
            { yychar=1 ;
            } 
            // fall through
          case 50: break;
          case 14: 
            { return new Symbol(sym.PR_IF,yyline,yychar,yytext());
            } 
            // fall through
          case 51: break;
          case 15: 
            { return new Symbol(sym.AND,yyline,yychar,yytext());
            } 
            // fall through
          case 52: break;
          case 16: 
            { return new Symbol(sym.OR,yyline,yychar,yytext());
            } 
            // fall through
          case 53: break;
          case 17: 
            { return new Symbol(sym.EQUAL,yyline,yychar,yytext());
            } 
            // fall through
          case 54: break;
          case 18: 
            { return new Symbol(sym.PR_RUN,yyline,yychar,yytext());
            } 
            // fall through
          case 55: break;
          case 19: 
            { //System.out.println("Reconocio BOOL: "+yytext());  
    //lexemas.add( new Lexema(yytext(),"Boolean",yyline,yychar));
    return new Symbol(sym.BOOLEANO,yyline,yychar, yytext());
            } 
            // fall through
          case 56: break;
          case 20: 
            { return new Symbol(sym.PR_THEN,yyline,yychar,yytext());
            } 
            // fall through
          case 57: break;
          case 21: 
            { return new Symbol(sym.PR_ELSE,yyline,yychar,yytext());
            } 
            // fall through
          case 58: break;
          case 22: 
            { return new Symbol(sym.PR_SEED,yyline,yychar,yytext());
            } 
            // fall through
          case 59: break;
          case 23: 
            { return new Symbol(sym.PR_WITH,yyline,yychar,yytext());
            } 
            // fall through
          case 60: break;
          case 24: 
            { return new Symbol(sym.PR_RULES,yyline,yychar,yytext());
            } 
            // fall through
          case 61: break;
          case 25: 
            { return new Symbol(sym.PR_MATCH,yyline,yychar,yytext());
            } 
            // fall through
          case 62: break;
          case 26: 
            { return new Symbol(sym.PR_REWARD,yyline,yychar,yytext());
            } 
            // fall through
          case 63: break;
          case 27: 
            { return new Symbol(sym.PR_ROUNDS,yyline,yychar,yytext());
            } 
            // fall through
          case 64: break;
          case 28: 
            { return new Symbol(sym.PR_MUTUAL,yyline,yychar,yytext());
            } 
            // fall through
          case 65: break;
          case 29: 
            { return new Symbol(sym.PR_SCORING,yyline,yychar,yytext());
            } 
            // fall through
          case 66: break;
          case 30: 
            { return new Symbol(sym.PR_INITIAL,yyline,yychar,yytext());
            } 
            // fall through
          case 67: break;
          case 31: 
            { return new Symbol(sym.PR_PLAYERS,yyline,yychar,yytext());
            } 
            // fall through
          case 68: break;
          case 32: 
            { return new Symbol(sym.PR_STRATEGY,yyline,yychar,yytext());
            } 
            // fall through
          case 69: break;
          case 33: 
            { return new Symbol(sym.PR_BETRAYAL,yyline,yychar,yytext());
            } 
            // fall through
          case 70: break;
          case 34: 
            { return new Symbol(sym.PR_DEFECTION,yyline,yychar,yytext());
            } 
            // fall through
          case 71: break;
          case 35: 
            { return new Symbol(sym.PR_STRATEGIES,yyline,yychar,yytext());
            } 
            // fall through
          case 72: break;
          case 36: 
            { return new Symbol(sym.PR_PUNISHMENT,yyline,yychar,yytext());
            } 
            // fall through
          case 73: break;
          case 37: 
            { return new Symbol(sym.PR_COOPERATION,yyline,yychar,yytext());
            } 
            // fall through
          case 74: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
